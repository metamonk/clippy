<story-context id="1-12-fix-video-playback-early-stop" v="1.0">
  <metadata>
    <epicId>1</epicId>
    <storyId>1.12</storyId>
    <title>Fix Video Playback Early Stop</title>
    <status>ready-for-dev</status>
    <generatedAt>2025-10-28</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>docs/stories/1-12-fix-video-playback-early-stop.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>user</asA>
    <iWant>videos to play to their true end position</iWant>
    <soThat>I can see all frames including the final second of content</soThat>
    <tasks>
      - Add diagnostic logging to identify root cause (AC: 1, 2, 6)
      - Test different MPV keep-open configurations (AC: 1, 2, 6)
      - Investigate duration vs playable content mismatch (AC: 1, 6)
      - Adjust time polling interval if needed (AC: 1, 2)
      - Implement fix based on root cause analysis (AC: 1, 2, 3, 5)
      - Document root cause and solution (AC: 6)
      - Test fix with all supported codecs (AC: 4)
      - Write regression tests (AC: 5, 7)
      - Verify no regression in existing behavior (AC: 5)
    </tasks>
  </story>

  <acceptanceCriteria>
    <criterion id="1">Video plays to 100% of duration (e.g., 0:05 / 0:05)</criterion>
    <criterion id="2">Last frame visible before playback stops</criterion>
    <criterion id="3">Time display shows complete duration when stopped</criterion>
    <criterion id="4">Fix works across all codecs (H.264, HEVC, ProRes, VP9)</criterion>
    <criterion id="5">No regression in existing playback behavior</criterion>
    <criterion id="6">Root cause documented in code comments or ADR</criterion>
    <criterion id="7">Tests verify playback reaches true end</criterion>
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc>
        <path>docs/TECHNICAL-DEBT.md</path>
        <title>Technical Debt - TD-004</title>
        <section>TD-004: Video Playback Stops 1 Second Before End</section>
        <snippet>Low priority cosmetic issue. Video stops at ~0:04/0:05 instead of true end. Root cause likely MPV keep-open setting (line 27), duration calculation, or 100ms polling interval. Includes diagnostic steps and resolution approach. Effort: ~1 hour.</snippet>
      </doc>
      <doc>
        <path>docs/HANDOFF-VIDEO-PLAYER-ENHANCEMENTS-2025-10-28.md</path>
        <title>Handoff: Video Player Enhancements</title>
        <section>Issue 2: Video Stops 1 Second Before End (TD-004)</section>
        <snippet>Complete debugging guidance with 4 hypotheses: keep-open behavior, duration calculation, polling interval (100ms), pause-on-end logic. Includes diagnostic logging patterns, MPV property comparisons (duration, length, time-remaining), and testing approach.</snippet>
      </doc>
      <doc>
        <path>docs/epics.md</path>
        <title>Epic Breakdown</title>
        <section>Story 1.12: Fix Video Playback Early Stop</section>
        <snippet>Complete acceptance criteria. Prerequisites: Story 1.4. Technical Debt Reference: TD-004.</snippet>
      </doc>
      <doc>
        <path>docs/stories/1-4-video-preview-player-with-basic-controls.md</path>
        <title>Story 1.4: Video Preview Player</title>
        <section>MPV Configuration and Integration</section>
        <snippet>MPV configured with headless mode (vo=null, force-window=no, audio=no), keep-open=yes (line 27), hardware decoding. Polling interval: 100ms (VideoPlayer.tsx:171). All codecs verified working.</snippet>
      </doc>
      <doc>
        <path>docs/architecture.md</path>
        <title>Decision Architecture</title>
        <section>Video Player Integration - MPV</section>
        <snippet>MPV (libmpv2 v5.0.1) configured for headless operation. Performance targets: 30+ FPS playback, smooth timeline rendering.</snippet>
      </doc>
    </docs>

    <code>
      <file>
        <path>src-tauri/src/services/mpv_player.rs</path>
        <kind>service</kind>
        <symbol>MpvPlayer::new</symbol>
        <lines>14-38</lines>
        <reason>⚠️ Line 27: keep-open=yes setting. HYPOTHESIS 1: May cause early stop. Try keep-open=always or remove setting. Contains MPV initialization and configuration.</reason>
      </file>
      <file>
        <path>src-tauri/src/services/mpv_player.rs</path>
        <kind>service</kind>
        <symbol>MpvPlayer::get_time</symbol>
        <lines>*</lines>
        <reason>Gets current playback time via time-pos property. Add diagnostic logging here to compare time-pos vs time-remaining vs playtime-remaining.</reason>
      </file>
      <file>
        <path>src-tauri/src/services/mpv_player.rs</path>
        <kind>service</kind>
        <symbol>MpvPlayer::get_duration</symbol>
        <lines>*</lines>
        <reason>Gets duration via duration property. HYPOTHESIS 2: Duration may not match playable content. Add logging to compare duration vs length properties.</reason>
      </file>
      <file>
        <path>src/components/player/VideoPlayer.tsx</path>
        <kind>react-component</kind>
        <symbol>VideoPlayer</symbol>
        <lines>156-174</lines>
        <reason>⚠️ Line 171: 100ms polling interval. HYPOTHESIS 3: May detect end prematurely. Try 33ms (30fps). Time polling loop that calls mpv_get_time.</reason>
      </file>
      <file>
        <path>src/components/player/VideoPlayer.tsx</path>
        <kind>react-component</kind>
        <symbol>VideoPlayer</symbol>
        <lines>176-193</lines>
        <reason>⚠️ HYPOTHESIS 4: Trim boundary constraints (lines 185-193). Check if pause-on-end logic exists that might stop playback early.</reason>
      </file>
      <file>
        <path>src/stores/playerStore.ts</path>
        <kind>zustand-store</kind>
        <symbol>usePlayerStore</symbol>
        <lines>1-103</lines>
        <reason>Player state management. Tracks currentTime and duration. Verify end-of-video detection logic doesn't trigger prematurely.</reason>
      </file>
    </code>

    <dependencies>
      <frontend>
        <package name="react" version="^19.1.0" />
        <package name="zustand" version="^4" />
        <package name="@tauri-apps/api" version="^2" />
        <package name="sonner" version="^2.0.7" />
      </frontend>
      <backend>
        <package name="tauri" version="2.x" />
        <package name="libmpv2" version="5.0.1" />
        <package name="tracing" version="0.1.x" />
        <package name="anyhow" version="latest" />
      </backend>
      <testing>
        <package name="vitest" version="latest" />
        <package name="@testing-library/react" version="^16" />
      </testing>
      <testFiles>
        <file path="/Users/zeno/Downloads/test_h264.mp4" codec="H.264" duration="5s" />
        <file path="/Users/zeno/Downloads/test_hevc.mp4" codec="HEVC" duration="5s" />
        <file path="/Users/zeno/Downloads/test_prores.mov" codec="ProRes" duration="5s" />
        <file path="/Users/zeno/Downloads/test_vp9.webm" codec="VP9" duration="5s" />
      </testFiles>
    </dependencies>
  </artifacts>

  <constraints>
    <constraint>Use Rust tracing macros for diagnostic logging (debug!, info!, error!)</constraint>
    <constraint>Maintain headless MPV configuration (vo=null) - do not change video output mode</constraint>
    <constraint>No regression in existing playback, seek, or load functionality per AC #5</constraint>
    <constraint>Fix must work across all codecs: H.264, HEVC yuv420p, ProRes, VP9 per AC #4</constraint>
    <constraint>Document root cause in code comments or create ADR if architectural per AC #6</constraint>
    <constraint>Performance: maintain 30+ FPS playback, no stuttering introduced</constraint>
    <constraint>If reducing polling interval, monitor CPU impact</constraint>
    <constraint>Test with videos of different lengths: 5s, 30s, 60s clips</constraint>
    <constraint>Write regression tests to prevent future early-stop issues per AC #7</constraint>
  </constraints>

  <interfaces>
    <interface>
      <name>mpv.get_property</name>
      <kind>libmpv-api</kind>
      <signature>mpv.get_property::&lt;T&gt;(property: &str) -&gt; Result&lt;T&gt;</signature>
      <path>libmpv2 crate</path>
      <note>Key properties to investigate: "time-pos", "time-remaining", "playtime-remaining", "duration", "length". Compare values during end-of-video.</note>
    </interface>
    <interface>
      <name>Event::EndFile</name>
      <kind>libmpv-event</kind>
      <signature>Event::EndFile(reason: EndFileReason)</signature>
      <path>libmpv2::events</path>
      <note>Monitor EndFile events with different keep-open configurations. May provide insight into early stop behavior.</note>
    </interface>
    <interface>
      <name>keep-open property</name>
      <kind>mpv-property</kind>
      <signature>mpv.set_property("keep-open", value: "yes"|"always"|"no")</signature>
      <path>src-tauri/src/services/mpv_player.rs:27</path>
      <note>Current: "yes". Try: "always" (keeps file loaded even at end), or remove entirely. Affects EndFile behavior.</note>
    </interface>
  </interfaces>

  <tests>
    <standards>
      Testing framework: Vitest + React Testing Library for frontend, cargo test + tracing logs for Rust backend.
      Test location: Co-located with source files (*.test.tsx), inline #[cfg(test)] for Rust.
      Coverage: Regression tests for end-of-video behavior, integration tests with all codecs.
      Debugging: Use RUST_LOG=debug cargo test to see MPV property values during playback.
      Validation: Verify currentTime reaches duration within 0.1s tolerance at end.
    </standards>

    <locations>
      <location>src/components/player/VideoPlayer.test.tsx</location>
      <location>src-tauri/src/services/mpv_player.rs (inline tests)</location>
    </locations>

    <ideas>
      <test ac="1,2,3">Integration test: Load video, play to end, assert currentTime &gt;= duration - 0.1</test>
      <test ac="1">Manual test: Visual inspection - last frame visible before stop</test>
      <test ac="3">Component test: PlayerControls displays 100% duration (e.g., 0:05 / 0:05) at end</test>
      <test ac="4">Integration test: Test early-stop fix with each codec (H.264, HEVC, ProRes, VP9)</test>
      <test ac="4">Integration test: Test with different video lengths (5s, 30s, 60s)</test>
      <test ac="5">Regression test: Existing playback, pause, seek, load tests still pass</test>
      <test ac="6">Code review: Verify root cause documented in comments or ADR exists</test>
      <test ac="7">Unit test: Mock MPV duration=5.0, time-pos=4.95, verify end detection within tolerance</test>
      <test>Debug test: Log time-pos, time-remaining, playtime-remaining, duration at end of playback</test>
      <test>Debug test: Compare duration vs length properties for each codec</test>
      <test>Performance test: If polling interval reduced to 33ms, verify CPU usage &lt; 10% for 1080p</test>
    </ideas>
  </tests>
</story-context>
