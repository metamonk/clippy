<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>4</epicId>
    <storyId>4.8</storyId>
    <title>Advanced Recording Controls (Pause/Resume)</title>
    <status>drafted</status>
    <generatedAt>2025-10-29</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>docs/stories/4-8-advanced-recording-controls-pause-resume.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>a user</asA>
    <iWant>to pause and resume recording without creating separate files</iWant>
    <soThat>I can take breaks during long recordings without losing continuity</soThat>
    <tasks>
- Task 1: Extend ScreenCaptureKit to support pause/resume capture (AC: #1, #3)
  - Subtask 1.1: Research SCStream pause capabilities (stopCapture/startCapture vs configuration)
  - Subtask 1.2: Implement `pause_capture()` method in ScreenCapture service to stop SCStream
  - Subtask 1.3: Implement `resume_capture()` method to restart SCStream with same configuration
  - Subtask 1.4: Track pause timestamps to synchronize with audio/video streams
  - Subtask 1.5: Write unit tests for pause/resume capture functionality

- Task 2: Extend audio capture services to support pause/resume (AC: #1, #3)
  - Subtask 2.1: Implement pause_capture() for system audio (ScreenCaptureKit audio)
  - Subtask 2.2: Implement pause_capture() for microphone (CPAL/AudioCapture service)
  - Subtask 2.3: Implement pause_capture() for webcam audio (nokhwa wrapper)
  - Subtask 2.4: Ensure all audio streams synchronize pause/resume timestamps with video
  - Subtask 2.5: Write unit tests for audio pause/resume synchronization

- Task 3: Implement real pause/resume backend commands (AC: #1, #2, #3)
  - Subtask 3.1: Replace Story 2.5 placeholder pause/resume commands with real implementation
  - Subtask 3.2: Update `RecordingOrchestrator` to coordinate multi-stream pause (screen, webcam, 3 audio)
  - Subtask 3.3: Track pause/resume timestamps in orchestrator state for segment tracking
  - Subtask 3.4: Update recording timer backend logic to track paused duration
  - Subtask 3.5: Write integration tests for multi-stream pause/resume coordination

- Task 4: Handle FFmpeg discontinuous segment encoding (AC: #4, #5, #7)
  - Subtask 4.1: Research FFmpeg concat demuxer or segment-based encoding strategies
  - Subtask 4.2: Implement PCM/video file segment creation during pause/resume cycles
  - Subtask 4.3: Create segment list file (concat.txt) tracking non-paused segments
  - Subtask 4.4: Update `finalize_with_audio()` to concatenate segments using FFmpeg concat demuxer
  - Subtask 4.5: Ensure seamless transitions between segments (no gaps, no frozen frames)
  - Subtask 4.6: Write integration tests validating segment concatenation with FFprobe

- Task 5: Update frontend UI for pause/resume state (AC: #2)
  - Subtask 5.1: Review Story 2.5 RecordingControls component (already has pause/resume buttons)
  - Subtask 5.2: Update visual indicator to show "PAUSED" state (orange indicator vs red recording dot)
  - Subtask 5.3: Ensure timer stops during pause (already implemented in Story 2.5, verify works with real backend)
  - Subtask 5.4: Add toast notification when pause/resume occurs
  - Subtask 5.5: Update component tests for real pause/resume backend integration

- Task 6: Multi-cycle pause/resume validation (AC: #6)
  - Subtask 6.1: Test 5+ pause/resume cycles in single recording session
  - Subtask 6.2: Validate segment timestamps are tracked correctly across cycles
  - Subtask 6.3: Verify FFmpeg segment list includes all non-paused segments
  - Subtask 6.4: Test memory usage remains stable across multiple pause/resume cycles
  - Subtask 6.5: Write E2E test for multi-cycle pause/resume workflow

- Task 7: Final output validation (AC: #7)
  - Subtask 7.1: Record 5-minute video with 3 pause/resume cycles
  - Subtask 7.2: Verify final MP4 duration matches active recording time (not total elapsed time)
  - Subtask 7.3: Verify no frozen frames or visual gaps during segment transitions using VLC/QuickTime
  - Subtask 7.4: Verify audio remains synchronized across segment boundaries (&lt;50ms tolerance)
  - Subtask 7.5: Run FFprobe to validate MP4 structure (no errors, continuous timestamps)
  - Subtask 7.6: Write E2E test validating final output quality
    </tasks>
  </story>

  <acceptanceCriteria>
1. Pause button during active recording freezes capture
2. Timer stops while paused, visual indicator shows "PAUSED" state
3. Resume button continues recording from pause point
4. Paused segments omitted from final recording (no frozen frames)
5. FFmpeg handles discontinuous recording segments seamlessly
6. Can pause/resume multiple times in single recording session
7. Final MP4 plays continuously without gaps or artifacts
  </acceptanceCriteria>

  <artifacts>
    <docs>{{docs_artifacts}}</docs>
    <code>{{code_artifacts}}</code>
    <dependencies>{{dependencies_artifacts}}</dependencies>
  </artifacts>

  <constraints>{{constraints}}</constraints>
  <interfaces>{{interfaces}}</interfaces>
  <tests>
    <standards>{{test_standards}}</standards>
    <locations>{{test_locations}}</locations>
    <ideas>{{test_ideas}}</ideas>
  </tests>
</story-context>
