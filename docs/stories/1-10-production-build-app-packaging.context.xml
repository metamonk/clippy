<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>1</epicId>
    <storyId>10</storyId>
    <title>Production Build & App Packaging</title>
    <status>drafted</status>
    <generatedAt>2025-10-27</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>docs/stories/1-10-production-build-app-packaging.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>a developer</asA>
    <iWant>to build and package clippy as a distributable macOS application</iWant>
    <soThat>it can run outside of development mode</soThat>
    <tasks>
- Task 1: Configure Tauri build settings
  - Subtask 1.1: Verify tauri.conf.json bundle configuration
  - Subtask 1.2: Set bundle identifier (e.g., com.clippy.app)
  - Subtask 1.3: Configure macOS-specific bundle settings
  - Subtask 1.4: Run cargo tauri build and verify .app bundle created
  - Subtask 1.5: Write build verification test
- Task 2: Configure app icon
  - Subtask 2.1: Create or obtain placeholder app icon (1024x1024 PNG)
  - Subtask 2.2: Generate ICNS file from PNG using iconutil
  - Subtask 2.3: Place icon in src-tauri/icons/ directory
  - Subtask 2.4: Update tauri.conf.json to reference icon
  - Subtask 2.5: Verify icon appears in built .app bundle and macOS Dock
- Task 3: Test application launch from Applications folder
  - Subtask 3.1: Copy clippy.app to /Applications folder
  - Subtask 3.2: Launch app from Applications folder via Finder
  - Subtask 3.3: Verify all features work (video import, timeline, export)
  - Subtask 3.4: Test window state persistence across launches
  - Subtask 3.5: Document any Gatekeeper bypass steps for unsigned builds
- Task 4: Setup basic code signing
  - Subtask 4.1: Generate self-signed development certificate in Keychain Access
  - Subtask 4.2: Configure tauri.conf.json with signing identity
  - Subtask 4.3: Run build with code signing enabled
  - Subtask 4.4: Verify codesign -dv --verbose=4 shows valid signature
  - Subtask 4.5: Document code signing setup in README
- Task 5: Create distributable package
  - Subtask 5.1: Verify .app bundle can be copied to another Mac
  - Subtask 5.2: Test launch on second Mac (document Gatekeeper approval process)
  - Subtask 5.3: Optional: Create DMG installer using cargo-bundle or hdiutil
  - Subtask 5.4: Test DMG installation flow
  - Subtask 5.5: Document distribution steps
- Task 6: Add build documentation to README
  - Subtask 6.1: Document prerequisites (Xcode CLI, Rust, Node.js)
  - Subtask 6.2: Add build commands section (dev and production)
  - Subtask 6.3: Document code signing setup for development
  - Subtask 6.4: Add distribution instructions (copying .app or DMG)
  - Subtask 6.5: Include troubleshooting section for common build issues
    </tasks>
  </story>

  <acceptanceCriteria>
1. cargo tauri build produces working .app bundle
2. Application runs when launched from Applications folder
3. App icon configured (can be placeholder)
4. Basic code signing setup (development certificate acceptable)
5. DMG or .app bundle can be distributed to other Macs
6. Build documentation added to README
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <artifact>
        <path>docs/architecture.md</path>
        <title>Deployment Architecture</title>
        <section>Deployment Architecture</section>
        <snippet>Defines build process (npm run tauri build), bundle output location (src-tauri/target/release/bundle/macos/clippy.app), distribution methods (development: unsigned .app, production: code signing + notarization + DMG), and system requirements (macOS 12+, Apple Silicon primary).</snippet>
      </artifact>
      <artifact>
        <path>docs/architecture.md</path>
        <title>Development Environment</title>
        <section>Development Environment</section>
        <snippet>Prerequisites for building (Rust 1.80+, Node.js 20+, Xcode CLI tools) and build commands (npm run tauri dev for development, npm run tauri build for production).</snippet>
      </artifact>
      <artifact>
        <path>docs/architecture.md</path>
        <title>System Requirements</title>
        <section>System Requirements</section>
        <snippet>macOS 12+ (Monterey and later), Apple Silicon (M1/M2/M3) primary support, Intel Macs secondary support, 8GB RAM minimum, 16GB recommended.</snippet>
      </artifact>
      <artifact>
        <path>docs/PRD.md</path>
        <title>Platform Compatibility</title>
        <section>Non-Functional Requirements - NFR002</section>
        <snippet>System shall run on macOS 12+ (Monterey and later) with primary support for Apple Silicon (M1/M2/M3) and secondary Intel support. Minimum 8GB RAM (16GB recommended).</snippet>
      </artifact>
      <artifact>
        <path>docs/PRD.md</path>
        <title>Native macOS Integration</title>
        <section>Functional Requirements - FR012</section>
        <snippet>System shall implement native menu bar, window chrome, file dialogs, keyboard shortcuts following macOS conventions, notifications, and proper system permissions handling.</snippet>
      </artifact>
      <artifact>
        <path>docs/epics.md</path>
        <title>Story 1.10 Definition</title>
        <section>Epic 1 - Story 1.10</section>
        <snippet>Story 1.10: Production Build & App Packaging. As a developer, I want to build and package clippy as a distributable macOS application. Prerequisites: Epic 1 complete (Story 1.10 is final story in Epic 1).</snippet>
      </artifact>
    </docs>
    <code>
      <artifact>
        <path>src-tauri/tauri.conf.json</path>
        <kind>config</kind>
        <symbol>bundle</symbol>
        <lines>28-38</lines>
        <reason>Bundle configuration already configured with identifier "com.zeno.clippy" and icon paths - needs verification and potential updates for code signing</reason>
      </artifact>
      <artifact>
        <path>src-tauri/Cargo.toml</path>
        <kind>config</kind>
        <symbol>build-dependencies</symbol>
        <lines>17-18</lines>
        <reason>Contains tauri-build dependency required for production builds</reason>
      </artifact>
      <artifact>
        <path>src-tauri/build.rs</path>
        <kind>build script</kind>
        <symbol>main</symbol>
        <lines>1-3</lines>
        <reason>Tauri build script that runs during cargo build - standard implementation</reason>
      </artifact>
      <artifact>
        <path>src-tauri/icons/</path>
        <kind>directory</kind>
        <symbol>icon.icns</symbol>
        <lines>N/A</lines>
        <reason>Icon assets directory already contains icon.icns for macOS - may need verification or replacement</reason>
      </artifact>
      <artifact>
        <path>package.json</path>
        <kind>config</kind>
        <symbol>scripts.build</symbol>
        <lines>8</lines>
        <reason>Build script "tsc && vite build" compiles TypeScript and builds frontend - used by Tauri beforeBuildCommand</reason>
      </artifact>
      <artifact>
        <path>vitest.config.ts</path>
        <kind>config</kind>
        <symbol>test configuration</symbol>
        <lines>1-17</lines>
        <reason>Test framework configuration - relevant for build verification tests (Task 1.5)</reason>
      </artifact>
    </code>
    <dependencies>
      <node>
        <dependency name="@tauri-apps/cli" version="^2" type="devDependencies" purpose="CLI tool for building and bundling Tauri applications"/>
        <dependency name="@tauri-apps/api" version="^2" type="dependencies" purpose="Tauri API bindings for frontend"/>
        <dependency name="vite" version="^7.0.4" type="devDependencies" purpose="Build tool for frontend assets"/>
        <dependency name="typescript" version="~5.8.3" type="devDependencies" purpose="TypeScript compiler required for build process"/>
        <dependency name="react" version="^19.1.0" type="dependencies" purpose="Frontend framework"/>
        <dependency name="vitest" version="^2" type="devDependencies" purpose="Testing framework for build verification tests"/>
      </node>
      <rust>
        <dependency name="tauri-build" version="2" type="build-dependencies" purpose="Tauri build script support"/>
        <dependency name="tauri" version="2" type="dependencies" purpose="Core Tauri framework"/>
      </rust>
      <system>
        <requirement name="Rust" version="1.80+" purpose="Required for cargo tauri build"/>
        <requirement name="Node.js" version="20+" purpose="Required for npm build scripts"/>
        <requirement name="Xcode Command Line Tools" version="latest" purpose="Required for macOS code signing and iconutil"/>
        <requirement name="macOS" version="12+" purpose="Build and runtime platform"/>
      </system>
    </dependencies>
  </artifacts>

  <constraints>
    <constraint>macOS-only platform - build must target macOS 12+ (Monterey and later)</constraint>
    <constraint>Bundle identifier must use reverse-domain format (currently: com.zeno.clippy)</constraint>
    <constraint>Icon must be in ICNS format for macOS (already present at src-tauri/icons/icon.icns)</constraint>
    <constraint>Development certificates acceptable for this story - production signing deferred to future</constraint>
    <constraint>Gatekeeper bypass required for unsigned/self-signed builds - must document for users</constraint>
    <constraint>Build output location must be src-tauri/target/release/bundle/macos/clippy.app</constraint>
    <constraint>Testing framework uses vitest for frontend, cargo test for Rust backend</constraint>
    <constraint>Build must not break existing functionality (video import, timeline, export per AC #2)</constraint>
  </constraints>
  <interfaces>
    <interface>
      <name>cargo tauri build</name>
      <kind>CLI command</kind>
      <signature>cargo tauri build [OPTIONS]</signature>
      <path>Executed via @tauri-apps/cli package (npm run tauri build)</path>
    </interface>
    <interface>
      <name>npm run build</name>
      <kind>npm script</kind>
      <signature>npm run build (executes: tsc && vite build)</signature>
      <path>package.json:8</path>
    </interface>
    <interface>
      <name>tauri.conf.json bundle configuration</name>
      <kind>configuration schema</kind>
      <signature>{ bundle: { active: boolean, targets: string, icon: string[] } }</signature>
      <path>src-tauri/tauri.conf.json:28-38</path>
    </interface>
    <interface>
      <name>codesign verification</name>
      <kind>macOS CLI command</kind>
      <signature>codesign -dv --verbose=4 [path-to-app]</signature>
      <path>Used for verifying code signature (Task 4.4)</path>
    </interface>
  </interfaces>
  <tests>
    <standards>Frontend testing uses Vitest + React Testing Library with test files at src/**/*.test.{ts,tsx}. Backend testing uses cargo test with #[cfg(test)] modules in src-tauri/src/**/*.rs. Test setup file at src/test/setup.ts mocks canvas for Konva.js tests. Run tests via npm run test (frontend) or cd src-tauri && cargo test (backend).</standards>
    <locations>
      <location>src/**/*.test.{ts,tsx}</location>
      <location>src-tauri/src/**/*.rs (#[cfg(test)] modules)</location>
      <location>src/test/setup.ts (test configuration)</location>
    </locations>
    <ideas>
      <test-idea ac="1" type="integration">
        <description>Build verification test: Run cargo tauri build and verify .app bundle exists at expected path (src-tauri/target/release/bundle/macos/clippy.app)</description>
        <approach>Create integration test script or Rust test that executes build command and checks filesystem for bundle output</approach>
      </test-idea>
      <test-idea ac="1" type="unit">
        <description>Bundle configuration validation: Test that tauri.conf.json has valid bundle settings (identifier, icon paths, active=true)</description>
        <approach>TypeScript unit test that parses tauri.conf.json and validates required fields</approach>
      </test-idea>
      <test-idea ac="2" type="manual">
        <description>Application launch test: Manual verification that clippy.app launches from /Applications folder without errors</description>
        <approach>Manual testing procedure documented in test plan - launch app, verify UI loads, test core features (import, timeline, export)</approach>
      </test-idea>
      <test-idea ac="3" type="unit">
        <description>Icon configuration test: Verify icon.icns exists and is referenced in tauri.conf.json</description>
        <approach>Filesystem check for src-tauri/icons/icon.icns + config validation test</approach>
      </test-idea>
      <test-idea ac="4" type="integration">
        <description>Code signing verification: After build, run codesign -dv --verbose=4 on .app bundle and verify valid signature</description>
        <approach>Shell script or integration test that executes codesign command and parses output for signature validity</approach>
      </test-idea>
      <test-idea ac="6" type="documentation">
        <description>README documentation completeness: Verify README contains build commands, prerequisites, code signing setup, and distribution instructions</description>
        <approach>Documentation review checklist or automated grep test for required sections in README.md</approach>
      </test-idea>
    </ideas>
  </tests>
</story-context>
