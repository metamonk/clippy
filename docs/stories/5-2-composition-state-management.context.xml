<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>5</epicId>
    <storyId>2</storyId>
    <title>Composition State Management</title>
    <status>drafted</status>
    <generatedAt>2025-10-29</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>docs/stories/5-2-composition-state-management.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>a developer</asA>
    <iWant>composition state separate from clip preview state</iWant>
    <soThat>I can manage complex timeline playback without interfering with preview mode</soThat>
    <tasks>
      <task id="1" acs="1,2">Create compositionStore with Core State
        <subtask id="1.1">Create src/stores/compositionStore.ts file</subtask>
        <subtask id="1.2">Define TypeScript interfaces (CompositionState, ActiveClip, RenderState)</subtask>
        <subtask id="1.3">Implement Zustand store with initial state (currentCompositionTime, activeClips, activeTracks, renderState)</subtask>
        <subtask id="1.4">Add devtools middleware for debugging</subtask>
      </task>
      <task id="2" acs="4,5,6">Implement Clip Query Logic
        <subtask id="2.1">Create getActiveClipsAtTime(time) action</subtask>
        <subtask id="2.2">Create detectGaps(time) action</subtask>
        <subtask id="2.3">Create updateActiveClips(time) action</subtask>
      </task>
      <task id="3" acs="4">Clip Boundary Detection
        <subtask id="3.1">Create getNextClipBoundary(currentTime) utility</subtask>
        <subtask id="3.2">Add nextBoundaryTime to composition state</subtask>
        <subtask id="3.3">Implement boundary crossing detection</subtask>
      </task>
      <task id="4" acs="3">Integrate with VideoPlayer
        <subtask id="4.1">Update VideoPlayer.tsx to check playerStore.mode</subtask>
        <subtask id="4.2">Add composition mode branch using compositionStore</subtask>
        <subtask id="4.3">Add mode-specific rendering logic</subtask>
        <subtask id="4.4">Ensure preview mode remains unaffected</subtask>
      </task>
      <task id="5" acs="8">Performance Optimization
        <subtask id="5.1">Add performance measurement in updateActiveClips()</subtask>
        <subtask id="5.2">Optimize clip queries with caching</subtask>
        <subtask id="5.3">Test with complex timeline (10+ clips, 4+ tracks)</subtask>
        <subtask id="5.4">Document performance characteristics</subtask>
      </task>
      <task id="6" acs="7">Unit Tests
        <subtask id="6.1">Test getActiveClipsAtTime()</subtask>
        <subtask id="6.2">Test detectGaps()</subtask>
        <subtask id="6.3">Test updateActiveClips()</subtask>
        <subtask id="6.4">Test clip boundary detection</subtask>
        <subtask id="6.5">Test multi-track scenarios</subtask>
      </task>
      <task id="7" acs="3,8">Integration Testing
        <subtask id="7.1">Test VideoPlayer mode switching</subtask>
        <subtask id="7.2">Test composition playback simulation</subtask>
        <subtask id="7.3">Test edge cases (empty timeline, gaps, overlapping clips)</subtask>
      </task>
    </tasks>
  </story>

  <acceptanceCriteria>
    <criterion id="1">New compositionStore.ts created in src/stores/ with TypeScript interfaces</criterion>
    <criterion id="2">State tracks: currentCompositionTime, activeClips, activeTracks, renderState</criterion>
    <criterion id="3">VideoPlayer component checks mode === 'timeline' and uses composition state when in timeline mode</criterion>
    <criterion id="4">Clip switching logic triggers at clip boundaries based on timeline position</criterion>
    <criterion id="5">Gap detection identifies timeline regions without clips (returns empty array or gap marker)</criterion>
    <criterion id="6">Multi-track clip queries return all clips at given time across all tracks</criterion>
    <criterion id="7">Unit tests for composition state transitions cover all state changes</criterion>
    <criterion id="8">Performance: state updates complete in &lt; 16ms (60 FPS target, measured via browser performance API)</criterion>
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc>
        <path>docs/PRD.md</path>
        <title>Product Requirements Document</title>
        <section>FR006: Real-Time Video Preview and Playback</section>
        <snippet>System shall provide Timeline Composition Mode for rendering multi-track composition with continuous playback across clips, automatic transitions, real-time audio mixing, and PiP overlays. System shall maintain 60 FPS playback in composition mode and frame-accurate seeking.</snippet>
      </doc>
      <doc>
        <path>docs/PRD.md</path>
        <title>Product Requirements Document</title>
        <section>NFR001: Performance</section>
        <snippet>Video playback shall maintain 60 FPS for 1080p composition rendering with smooth timeline playback. Composition renderer state updates shall complete in &lt;16ms to maintain 60 FPS responsiveness.</snippet>
      </doc>
      <doc>
        <path>docs/architecture.md</path>
        <title>Architecture Document</title>
        <section>ADR-003: Use Zustand for State Management</section>
        <snippet>Zustand chosen for state management with 85ms vs 220ms (Context API) for complex updates. Optimized re-renders via selectors, simple API, good DevTools support.</snippet>
      </doc>
      <doc>
        <path>docs/architecture.md</path>
        <title>Architecture Document</title>
        <section>ADR-007: Playback Mode Architecture</section>
        <snippet>playerStore tracks active mode ('preview' | 'timeline'). VideoPlayer checks mode before synchronization - only syncs if mode === 'timeline'. Single MPV instance shared between modes.</snippet>
      </doc>
      <doc>
        <path>docs/architecture.md</path>
        <title>Architecture Document</title>
        <section>State Management Patterns (Zustand)</section>
        <snippet>Store structure uses immutable updates, devtools middleware. Timeline data model includes Clip (id, filePath, startTime, duration, trimIn, trimOut) and Track (id, clips, trackType) interfaces.</snippet>
      </doc>
      <doc>
        <path>docs/epic-5-composition-playback-plan.md</path>
        <title>Epic 5 Plan</title>
        <section>Story 5.2: Composition State Management</section>
        <snippet>Goal: Track composition playback state separate from single-clip preview. State tracks currentCompositionTime, activeClips, activeTracks, renderState. Performance requirement: state updates &lt; 16ms (60 FPS target).</snippet>
      </doc>
      <doc>
        <path>docs/stories/5-1-composition-playback-architecture-adr.md</path>
        <title>Story 5.1 Context</title>
        <section>Architecture Constraints</section>
        <snippet>ADR-007 establishes playerStore.mode separation. Single MPV instance shared between modes. Mode switching must be explicit and clean. 60 FPS target for timeline canvas with Konva.js.</snippet>
      </doc>
    </docs>
    <code>
      <artifact>
        <path>src/stores/playerStore.ts</path>
        <kind>store</kind>
        <symbol>PlayerStore</symbol>
        <lines></lines>
        <reason>Existing player state store with mode tracking. Composition store needs to coordinate with playerStore.mode to determine when to activate composition state.</reason>
      </artifact>
      <artifact>
        <path>src/stores/timelineStore.ts</path>
        <kind>store</kind>
        <symbol>TimelineState</symbol>
        <lines></lines>
        <reason>Timeline data model with tracks and clips. Composition state will query this store to find active clips at given time. Source of truth for clip/track data.</reason>
      </artifact>
      <artifact>
        <path>src/components/player/VideoPlayer.tsx</path>
        <kind>component</kind>
        <symbol>VideoPlayer</symbol>
        <lines></lines>
        <reason>Main player component that needs composition mode integration. Must check playerStore.mode and use compositionStore when mode === 'timeline'.</reason>
      </artifact>
    </code>
    <dependencies>
      <node>
        <zustand version="^4">State management library for composition store</zustand>
        <immer version="^10.2.0">Immutable state updates (used with Zustand)</immer>
        <react version="^19.1.0">UI framework</react>
        <typescript version="~5.8.3">Type safety for store interfaces</typescript>
      </node>
      <devDependencies>
        <vitest version="^2">Unit testing framework</vitest>
        <testing-library-react version="^16">Component testing</testing-library-react>
      </devDependencies>
    </dependencies>
  </artifacts>

  <constraints>
    <constraint>Use Zustand with devtools middleware for all state management (ADR-003)</constraint>
    <constraint>All state updates must be immutable using Immer or spread operators</constraint>
    <constraint>State update performance must be &lt;16ms to maintain 60 FPS responsiveness (NFR001)</constraint>
    <constraint>Composition state MUST be separate from preview state - no shared state between modes</constraint>
    <constraint>Use milliseconds (number type) for all time values (ADR-005)</constraint>
    <constraint>Only activate composition state when playerStore.mode === 'timeline' (ADR-007)</constraint>
    <constraint>Query timelineStore for clip/track data - composition store does NOT duplicate timeline data</constraint>
    <constraint>Clip boundary detection uses inclusive start (&gt;=) and exclusive end (&lt;) logic</constraint>
  </constraints>

  <interfaces>
    <interface>
      <name>CompositionState</name>
      <kind>TypeScript interface</kind>
      <signature>
interface CompositionState {
  currentCompositionTime: number;  // milliseconds
  activeClips: ActiveClip[];
  activeTracks: string[];
  renderState: RenderState;
  nextBoundaryTime: number | null;
}
      </signature>
      <path>src/stores/compositionStore.ts</path>
    </interface>
    <interface>
      <name>ActiveClip</name>
      <kind>TypeScript interface</kind>
      <signature>
interface ActiveClip {
  clip: Clip;
  trackId: string;
  trackType: 'video' | 'audio';
  relativeTime: number;  // time offset within clip (ms)
}
      </signature>
      <path>src/stores/compositionStore.ts</path>
    </interface>
    <interface>
      <name>RenderState</name>
      <kind>TypeScript enum</kind>
      <signature>
enum RenderState {
  idle = 'idle',
  loading = 'loading',
  playing = 'playing',
  paused = 'paused',
  error = 'error'
}
      </signature>
      <path>src/stores/compositionStore.ts</path>
    </interface>
    <interface>
      <name>getActiveClipsAtTime</name>
      <kind>Zustand action</kind>
      <signature>getActiveClipsAtTime: (time: number) => ActiveClip[]</signature>
      <path>src/stores/compositionStore.ts</path>
    </interface>
    <interface>
      <name>updateActiveClips</name>
      <kind>Zustand action</kind>
      <signature>updateActiveClips: (time: number) => void</signature>
      <path>src/stores/compositionStore.ts</path>
    </interface>
    <interface>
      <name>detectGaps</name>
      <kind>Zustand action</kind>
      <signature>detectGaps: (time: number) => boolean</signature>
      <path>src/stores/compositionStore.ts</path>
    </interface>
  </interfaces>

  <tests>
    <standards>
Vitest for unit tests with @testing-library/react for component integration. All store actions must have unit tests covering state transitions. Performance tests use performance.now() for measurement. Mock timelineStore data for clip query tests. Test coverage must include boundary conditions and edge cases.
    </standards>
    <locations>
      <location>src/stores/compositionStore.test.ts</location>
      <location>src/components/player/VideoPlayer.test.tsx (integration tests)</location>
    </locations>
    <ideas>
      <idea ac="1,2">Test compositionStore creation with correct initial state (currentCompositionTime: 0, activeClips: [], renderState: idle)</idea>
      <idea ac="4,6">Test getActiveClipsAtTime with single clip, multiple clips on different tracks, no clips (gap), boundary conditions (exactly at start/end)</idea>
      <idea ac="5">Test detectGaps returns true when no clips at time, false when clips exist</idea>
      <idea ac="4">Test updateActiveClips updates state correctly when clips change, remains unchanged within same clip</idea>
      <idea ac="4">Test clip boundary detection: detects start boundaries, detects end boundaries, handles overlapping clips on different tracks</idea>
      <idea ac="6">Test multi-track scenarios: 2 tracks with clips at same time, 4 tracks with varying coverage, mixed audio/video tracks</idea>
      <idea ac="3">Test VideoPlayer mode switching: switches from preview to timeline mode, uses composition state in timeline mode, preview state unaffected</idea>
      <idea ac="8">Test performance: measure state update time with performance.now(), verify &lt;16ms for complex timeline (10+ clips, 4+ tracks)</idea>
      <idea ac="7">Test composition playback simulation: advance currentCompositionTime through timeline, verify activeClips updates at boundaries</idea>
      <idea ac="3,7">Test edge cases: empty timeline, timeline with only gaps, overlapping clips on same track</idea>
    </ideas>
  </tests>
</story-context>
