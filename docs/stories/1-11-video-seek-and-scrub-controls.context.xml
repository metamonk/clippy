<story-context id="1-11-video-seek-and-scrub-controls" v="1.0">
  <metadata>
    <epicId>1</epicId>
    <storyId>1.11</storyId>
    <title>Video Seek and Scrub Controls</title>
    <status>ready-for-dev</status>
    <generatedAt>2025-10-28</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>docs/stories/1-11-video-seek-and-scrub-controls.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>user</asA>
    <iWant>to scrub through video with a progress bar and seek controls</iWant>
    <soThat>I can navigate to any point in the video quickly</soThat>
    <tasks>
      - Verify MPV seek command exists and implement if needed (AC: 2, 3, 6)
      - Add Slider/Progress Bar component to PlayerControls (AC: 1)
      - Implement seek/scrub handler (AC: 2, 3, 6)
      - Add keyboard shortcuts for seeking (AC: 4, 5)
      - Implement restart/end-of-video behavior (AC: 7)
      - Test seek functionality with all codecs (AC: 8)
      - Write comprehensive tests (AC: 9)
      - Manual testing and polish (AC: All)
    </tasks>
  </story>

  <acceptanceCriteria>
    <criterion id="1">Progress bar/slider shows current playback position</criterion>
    <criterion id="2">User can click or drag slider to scrub to any time</criterion>
    <criterion id="3">Scrubbing works during both playback and pause</criterion>
    <criterion id="4">Arrow key shortcuts for seeking (Left: -5s, Right: +5s)</criterion>
    <criterion id="5">Home/End keys jump to start/end</criterion>
    <criterion id="6">Seek accuracy within 33ms (1 frame at 30fps)</criterion>
    <criterion id="7">Restart button or auto-restart when video ends</criterion>
    <criterion id="8">Works with all supported codecs (H.264, HEVC, ProRes, VP9)</criterion>
    <criterion id="9">Tests added and passing</criterion>
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc>
        <path>docs/TECHNICAL-DEBT.md</path>
        <title>Technical Debt - TD-003</title>
        <section>TD-003: Video Player Missing Seek/Scrub Functionality</section>
        <snippet>Medium priority. Users cannot scrub through video or restart playback. Solution: Add seek controls with progress bar/slider, keyboard shortcuts (arrows for ±5s), frame-accurate seeking, and restart behavior. Effort: ~3 hours.</snippet>
      </doc>
      <doc>
        <path>docs/HANDOFF-VIDEO-PLAYER-ENHANCEMENTS-2025-10-28.md</path>
        <title>Handoff: Video Player Enhancements</title>
        <section>Issue 1: Missing Seek/Scrub Functionality (TD-003)</section>
        <snippet>Complete implementation guidance including MPV backend integration, slider UI options (shadcn/ui vs HTML5), keyboard shortcuts pattern, and testing approach with all codecs. Includes code examples for seek handler and slider integration.</snippet>
      </doc>
      <doc>
        <path>docs/epics.md</path>
        <title>Epic Breakdown</title>
        <section>Story 1.11: Video Seek and Scrub Controls</section>
        <snippet>Complete acceptance criteria and prerequisites. Build on Story 1.4 MPV integration. Technical Debt Reference: TD-003.</snippet>
      </doc>
      <doc>
        <path>docs/architecture.md</path>
        <title>Decision Architecture</title>
        <section>Video Player Integration - MPV</section>
        <snippet>MPV (libmpv2 v5.0.1) provides universal codec support. Frame-accurate seeking via "absolute+exact" mode. Headless configuration (vo=null). Performance target: <100ms seek latency.</snippet>
      </doc>
      <doc>
        <path>docs/PRD.md</path>
        <title>Product Requirements Document</title>
        <section>FR006: Real-Time Video Preview and Playback</section>
        <snippet>System shall provide Preview Mode with basic controls (play/pause, seek, scrub). Frame-accurate seeking (&lt;33ms precision) required. MPV playback engine for universal codec support.</snippet>
      </doc>
      <doc>
        <path>docs/PRD.md</path>
        <title>Product Requirements Document</title>
        <section>NFR001: Performance</section>
        <snippet>Scrubbing must feel responsive (&lt;100ms latency). Video playback shall maintain 30+ FPS for 1080p content.</snippet>
      </doc>
      <doc>
        <path>docs/stories/1-4-video-preview-player-with-basic-controls.md</path>
        <title>Story 1.4: Video Preview Player</title>
        <section>MPV Integration Pattern</section>
        <snippet>Completed using MPV (libmpv2 v5.0.1) via Tauri backend. Playback controlled through invoke() calls. Polling for time updates (100ms interval). Event-based file loading. All codecs (H.264, HEVC, ProRes, VP9) verified.</snippet>
      </doc>
    </docs>

    <code>
      <file>
        <path>src-tauri/src/commands/mpv.rs</path>
        <kind>tauri-command</kind>
        <symbol>mpv_seek</symbol>
        <lines>131-150</lines>
        <reason>✅ MPV seek command ALREADY IMPLEMENTED. Accepts time_seconds (f64) parameter. Calls mpv.seek() method. Returns MpvResponse. Ready to use from frontend.</reason>
      </file>
      <file>
        <path>src-tauri/src/services/mpv_player.rs</path>
        <kind>service</kind>
        <symbol>MpvPlayer</symbol>
        <lines>*</lines>
        <reason>MPV service wrapper implementing seek() method. Uses libmpv2 bindings. Configured for headless playback (vo=null). Provides frame-accurate seeking.</reason>
      </file>
      <file>
        <path>src/stores/playerStore.ts</path>
        <kind>zustand-store</kind>
        <symbol>usePlayerStore</symbol>
        <lines>1-103</lines>
        <reason>✅ Player store with seek() action ALREADY EXISTS (line 95). Currently just updates local state. Need to integrate with VideoPlayer to call invoke('mpv_seek'). Store tracks: currentTime, duration, isPlaying, mode.</reason>
      </file>
      <file>
        <path>src/components/player/PlayerControls.tsx</path>
        <kind>react-component</kind>
        <symbol>PlayerControls</symbol>
        <lines>1-72</lines>
        <reason>Current controls: play/pause button, time display, Space bar keyboard shortcut. NEEDS: Slider/progress bar, seek handler integration, additional keyboard shortcuts (arrows, home, end).</reason>
      </file>
      <file>
        <path>src/components/player/VideoPlayer.tsx</path>
        <kind>react-component</kind>
        <symbol>VideoPlayer</symbol>
        <lines>*</lines>
        <reason>MPV integration via Tauri invoke(). Handles mpv_init, mpv_load_file, mpv_play, mpv_pause. NEEDS: Seek handler to call invoke('mpv_seek', { time_seconds }) and update store.</reason>
      </file>
      <file>
        <path>src/lib/utils/timeUtils.ts</path>
        <kind>utility</kind>
        <symbol>formatTime</symbol>
        <lines>*</lines>
        <reason>Time formatting utility for display (MM:SS or HH:MM:SS). Used in PlayerControls for time display.</reason>
      </file>
    </code>

    <dependencies>
      <frontend>
        <package name="react" version="^19.1.0" />
        <package name="zustand" version="^4" />
        <package name="lucide-react" version="^0.548.0" />
        <package name="@tauri-apps/api" version="^2" />
        <package name="sonner" version="^2.0.7" />
        <package name="tailwindcss" version="^3" />
        <package name="@radix-ui/react-alert-dialog" version="^1.1.15" />
        <note>shadcn/ui Slider recommended: `npx shadcn@latest add slider`</note>
      </frontend>
      <backend>
        <package name="tauri" version="2.x" />
        <package name="libmpv2" version="5.0.1" />
        <package name="serde" version="1.x" />
        <package name="tracing" version="0.1.x" />
      </backend>
      <testing>
        <package name="vitest" version="latest" />
        <package name="@testing-library/react" version="^16" />
        <package name="@playwright/test" version="^1.56.1" />
      </testing>
    </dependencies>
  </artifacts>

  <constraints>
    <constraint>Use Tailwind CSS exclusively for styling - no CSS modules or styled-components</constraint>
    <constraint>Follow existing PlayerControls component structure and styling patterns</constraint>
    <constraint>Maintain MPV integration pattern: all playback control via Tauri invoke() commands</constraint>
    <constraint>Seek accuracy must be within 33ms (1 frame @ 30fps) per AC #6 and PRD NFR001</constraint>
    <constraint>Scrubbing latency must be &lt;100ms per PRD NFR001</constraint>
    <constraint>Use lucide-react icons for UI consistency (Play, Pause, RotateCcw for restart)</constraint>
    <constraint>Implement keyboard shortcuts only when player is active (avoid conflicts with other UI)</constraint>
    <constraint>Preserve playback state (playing/paused) when seeking per AC #3</constraint>
    <constraint>Support all MPV codecs: H.264, HEVC yuv420p, ProRes, VP9 per AC #8</constraint>
    <constraint>Write comprehensive tests: unit tests (store, commands), component tests, codec integration tests per AC #9</constraint>
  </constraints>

  <interfaces>
    <interface>
      <name>mpv_seek</name>
      <kind>tauri-command</kind>
      <signature>pub fn mpv_seek(time_seconds: f64, state: State&lt;MpvPlayerState&gt;) -&gt; MpvResponse</signature>
      <path>src-tauri/src/commands/mpv.rs:131-150</path>
      <note>✅ ALREADY IMPLEMENTED. Call from frontend: await invoke('mpv_seek', { time_seconds: number })</note>
    </interface>
    <interface>
      <name>playerStore.seek</name>
      <kind>zustand-action</kind>
      <signature>seek: (time: number) =&gt; void</signature>
      <path>src/stores/playerStore.ts:95</path>
      <note>✅ EXISTS but only updates local state. Extend to call MPV backend via VideoPlayer.</note>
    </interface>
    <interface>
      <name>Slider component</name>
      <kind>ui-component</kind>
      <signature>&lt;Slider value={[progress]} onValueChange={(value) =&gt; handleSeek(value[0])} max={100} step={0.1} /&gt;</signature>
      <path>shadcn/ui or HTML5 input[type=range]</path>
      <note>Two options: 1) shadcn/ui Slider (recommended for accessibility), 2) Native HTML5 range input (simpler)</note>
    </interface>
    <interface>
      <name>formatTime</name>
      <kind>utility-function</kind>
      <signature>formatTime(seconds: number): string</signature>
      <path>src/lib/utils/timeUtils.ts</path>
      <note>Formats time as MM:SS or HH:MM:SS. Used for time display in PlayerControls.</note>
    </interface>
  </interfaces>

  <tests>
    <standards>
      Testing framework: Vitest + React Testing Library for frontend, cargo test for Rust backend.
      Test location: Co-located with source files (*.test.tsx, *.test.ts).
      Coverage: Unit tests for store actions, component tests for UI interactions, integration tests for MPV commands.
      Mocking: Mock Tauri invoke() calls in frontend tests, use actual MPV in backend integration tests.
      Accessibility: Verify ARIA labels and keyboard navigation in component tests.
    </standards>

    <locations>
      <location>src/stores/playerStore.test.ts</location>
      <location>src/components/player/PlayerControls.test.tsx</location>
      <location>src/components/player/VideoPlayer.test.tsx</location>
      <location>src-tauri/src/commands/mpv.rs (inline #[cfg(test)] modules)</location>
    </locations>

    <ideas>
      <test ac="1">Component test: PlayerControls renders slider with correct progress value (currentTime / duration * 100)</test>
      <test ac="2,3">Component test: Slider onChange calls seek handler with correct time. Test during playback and pause states.</test>
      <test ac="4,5">Component test: Keyboard event handlers (ArrowLeft, ArrowRight, Home, End) call seek with correct offsets</test>
      <test ac="6">Integration test: Call mpv_seek and verify currentTime updates within 33ms tolerance</test>
      <test ac="7">Component test: End-of-video behavior - restart button visible/auto-restart triggered when currentTime >= duration</test>
      <test ac="8">Integration test: Load test videos (H.264, HEVC, ProRes, VP9), seek to multiple positions, verify accuracy</test>
      <test ac="9">Meta: Ensure all new tests pass with `npm test` and `cargo test`</test>
      <test>Unit test: playerStore.seek() updates currentTime state correctly</test>
      <test>Component test: Debouncing - rapid slider drags don't overwhelm MPV with seek calls</test>
      <test>Component test: Seek beyond duration clamps to duration, seek below 0 clamps to 0</test>
      <test>Component test: Keyboard shortcuts preventDefault to avoid browser default behavior</test>
      <test>Component test: ARIA labels for slider ("Video progress", "Seek to position")</test>
    </ideas>
  </tests>
</story-context>
